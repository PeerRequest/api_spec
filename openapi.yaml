openapi: 3.0.0
info:
  version: 1.0.0
  title: PeerRequest API
  description: PeerRequest Open API Specification.
tags:
  - name: auth
  - name: categories
  - name: entries
  - name: reviews
  - name: users
paths:
  /auth/logout:
    get:
      tags:
        - auth
      description: Logout the current user
      operationId: logout
      summary: /auth/logout
      responses:
        '200':
          description: User successfully logged out
  /auth/login:
    get:
      tags:
        - auth
      description: Redirects the user to an auth server
      operationId: loginRedirect
      summary: /auth/login
      parameters:
        - $ref: '#/components/parameters/auth_service'
      responses:
        '302':
          description: Redirect to the specified or default auth service
        '400':
          description: Invalid auth_service
  /auth/callback:
    get:
      tags:
        - auth
      description: OAuth2 Authentication Callback
      operationId: authCallback
      summary: /auth/callback
      parameters:
        - name: code
          in: query
          description: auth code give by an auth server to exchange for a token
          required: true
          schema:
            type: string
        - name: state
          in: query
          description: auth state returned by an auth server
          required: true
          schema:
            type: string
        - name: scope
          in: query
          description: contains granted scopes
          required: true
          schema:
            type: string
        - name: error
          in: query
          description: contains an error indicating why authorization failed
          required: false
          schema:
            type: string
        - name: error_description
          in: query
          description: contains an error description
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully logged in (will set a session cookie)
        '400':
          description: Malformed request or invalid flow
  /categories:
    get:
      tags:
        - categories
      description: Returns all categories
      operationId: getCategories
      summary: /categories
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
    post:
      tags:
        - categories
      description: Creates a new category
      operationId: createCategory
      summary: /categories
      requestBody:
        description: New category
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category created
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
  '/categories/{category_id}':
    get:
      tags:
        - categories
      description: Returns a category
      operationId: getCategory
      summary: /categories/<category_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
      responses:
        '200':
          description: Specified category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category does not exist
    patch:
      tags:
        - categories
      description: Changes details of a category
      operationId: patchCategory
      summary: /categories/<category_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
      requestBody:
        description: Changed details of the category
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entry'
      responses:
        '200':
          description: Category changed
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category does not exist
    delete:
      tags:
        - categories
      description: Deletes a category
      operationId: deleteCategory
      summary: /categories/<category_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
      responses:
        '200':
          description: Category deleted
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category does not exist
  '/categories/{category_id}/entries':
    get:
      tags:
        - entries
      description: Returns all entries in a category
      operationId: getEntries
      summary: /categories/<category_id>/entries
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
      responses:
        '200':
          description: List of entries of the specified category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entry'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category does not exist
    post:
      tags:
        - entries
      description: Adds one or more new entries to a category
      operationId: ceateEntry
      summary: /categories/<category_id>/entries
      parameters:
        - $ref: '#/components/parameters/category_id'
      requestBody:
        description: New entry/entries
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Entry'
      responses:
        '200':
          description: Entry/Entries created
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category does not exist
  '/categories/{category_id}/entries/{entry_id}':
    get:
      tags:
        - entries
      description: Returns one entry from a category
      operationId: getEntry
      summary: /categories/<category_id>/entries/<entry_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      responses:
        '200':
          description: Entry of the specified category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
    patch:
      tags:
        - entries
      description: Changes details of an entry
      operationId: patchEntry
      summary: /categories/<category_id>/entries/<entry_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      requestBody:
        description: Changed details of the entry
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entry'
      responses:
        '200':
          description: Entry edited
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
    delete:
      tags:
        - entries
      description: Deletes an entry
      operationId: deleteEntry
      summary: /categories/<category_id>/entries/<entry_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      responses:
        '200':
          description: Entry deleted
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
  '/categories/{category_id}/entries/{entry_id}/paper':
    get:
      tags:
        - entries
      description: Returns the paper of an entry from a category
      operationId: getPaper
      summary: /categories/<category_id>/entries/<entry_id>/paper
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      responses:
        '200':
          description: Paper of the specified entry
          content:
            application/pdf:
              schema:
                type: object
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
  /reviews:
    get:
      tags:
        - reviews
      description: Returns all reviews that are associated to the requesting user.
      operationId: getUserReviews
      summary: /reviews
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
      responses:
        '200':
          description: List of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
  '/categories/{category_id}/entries/{entry_id}/reviews':
    get:
      tags:
        - reviews
      description: Returns all reviews for an entry
      operationId: getReviews
      summary: /categories/<category_id>/entries/<entry_id>/reviews
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
      responses:
        '200':
          description: List of reviews for the specified entry
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The specified entry or category does not exist
    post:
      tags:
        - reviews
      description: Creates a review for an entry
      operationId: createReviews
      summary: /categories/<category_id>/entries/<entry_id>/reviews
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      requestBody:
        description: New review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '200':
          description: Review created
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The specified entry or category does not exist
  '/categories/{category_id}/entries/{entry_id}/reviews/{review_id}':
    get:
      tags:
        - reviews
      description: Returns a review from an entry
      operationId: getReview
      summary: /categories/<category_id>/entries/<entry_id>/reviews/<review_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - name: review_id
          in: path
          required: true
          description: The id of a review
          schema:
            type: string
      responses:
        '200':
          description: Review of the specified entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: 'The specified review, entry or category does not exist'
    patch:
      tags:
        - reviews
      description: Updates a review form
      operationId: patchReview
      summary: /categories/<category_id>/entries/<entry_id>/reviews/<review_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/paths/~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1reviews~1%7Breview_id%7D/get/parameters/2'
      requestBody:
        description: Changes of the review form
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review%20Form'
      responses:
        '200':
          description: Review form edited
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: 'The specified review, entry or category does not exist'
    delete:
      tags:
        - reviews
      description: Deletes a review form
      operationId: deleteReview
      summary: /categories/<category_id>/entries/<entry_id>/reviews/<review_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/paths/~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1reviews~1%7Breview_id%7D/get/parameters/2'
      responses:
        '200':
          description: Review deleted
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: 'The specified review, entry or category does not exist'
  '/categories/{category_id}/entries/{entry_id}/reviews/{review_id}/document':
    get:
      tags:
        - reviews
      description: Returns the documents attached to the review
      operationId: getReviewDocument
      summary: /categories/<category_id>/entries/<entry_id>/reviews/<review_id>/documents
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/paths/~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1reviews~1%7Breview_id%7D/get/parameters/2'
      responses:
        '200':
          description: Document
          content:
            application/pdf:
              schema:
                type: object
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: 'There is no document attached to this review or the specified review, entry or category does not exist'
    put:
      tags:
        - reviews
      description: Attaches a document to a review
      operationId: addReviewDocument
      summary: /categories/<category_id>/entries/<entry_id>/reviews/<review_id>/document
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/paths/~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1reviews~1%7Breview_id%7D/get/parameters/2'
      requestBody:
        description: new document
        content:
          application/pdf:
            schema:
              type: object
      responses:
        '200':
          description: Document successfully attached
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: 'The specified review, entry or category does not exist'
    delete:
      tags:
        - reviews
      description: Deletes a document attached to an review
      operationId: deleteReviewDocument
      summary: /categories/<category_id>/entries/<entry_id>/reviews/<review_id>/document
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/paths/~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1reviews~1%7Breview_id%7D/get/parameters/2'
      responses:
        '200':
          description: Document successfully deleted
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: 'The specified review, entry or category does not exist'
  '/users/{user_id}/entries':
    get:
      tags:
        - users
      description: Returns all entries of a user
      operationId: getUserEntries
      summary: /users/<user_id>/entries
      parameters:
        - $ref: '#/paths/~1users~1%7Buser_id%7D/get/parameters/0'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
      responses:
        '200':
          description: List of entries created by the specified user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entry'
  '/users/{user_id}':
    get:
      tags:
        - users
      description: Show the account details of a user
      operationId: getUser
      summary: /users/<user_id>
      parameters:
        - name: user_id
          in: path
          required: true
          description: The id of a user
          schema:
            type: string
      responses:
        '200':
          description: Account details of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/self:
    get:
      tags:
        - users
      description: Show the account details of the requesting user
      operationId: getUserSelf
      summary: /users/self
      responses:
        '200':
          description: Account details of the requesting user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/self/entries:
    get:
      tags:
        - users
      description: Returns all entries of the requesting user user
      operationId: getUserSelfEntries
      summary: /users/self/entries
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
      responses:
        '200':
          description: List of entries created by the requesting user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entry'
components:
  parameters:
    category_id:
      name: category_id
      in: path
      required: true
      description: The id of a category
      schema:
        type: string
    entry_id:
      name: entry_id
      in: path
      required: true
      description: The id of an entry
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: How many items to return at one time
      required: false
      schema:
        type: integer
        min: 1
        max: 100
        default: 100
    auth_service:
      name: auth_service
      in: query
      description: refers to a specific auth_service
      required: false
      schema:
        default: keycloak
        type: string
        enum:
          - keycloak
          - kit
    after:
      name: after
      in: query
      description: entity id of last entity from last page
      required: false
      schema:
        type: integer
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Entry:
      type: object
      properties:
        id:
          type: integer
          example: 42
        title:
          type: string
          example: 'Great Paper #01'
        researcher_id:
          type: integer
          example: 100
        researcher_name:
          type: string
          example: Karol Bender
        category_id:
          type: integer
          example: 5
        authors:
          type: string
          example: 'Smitty Werben Jagger Man Jensen, Ada Wong, David Martinez'
        slots:
          type: integer
          example: 2
          nullable: true
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 42
        category_type:
          type: string
          enum:
            - Internal
            - External
        year:
          type: integer
          example: 2023
        deadline:
          type: string
          example: 'Tue, 29. Nov 2022'
          format: 'ddd, dd. mmm yyyy'
          nullable: true
        title:
          type: string
          example: International Paper Conference
        researcher_id:
          type: integer
          example: 100
        researcher_name:
          type: string
          example: Karol Bender
        rating_scale:
          type: object
          properties:
            low:
              type: integer
            high:
              type: integer
          nullable: true
    User:
      type: object
      properties:
        id:
          type: integer
          example: 42
        name:
          type: string
          example: Roosevelt Booth
        email:
          type: string
          example: roosevelt.booth@example.org
    Review:
      type: object
      properties:
        id:
          type: integer
          example: 42
        entry_id:
          type: integer
          example: 100
        entry:
          anyOf:
            - $ref: '#/components/schemas/Entry'
            - type: object
              nullable: true
        researcher_id:
          type: integer
          example: 100
        researcher:
          anyOf:
            - $ref: '#/components/schemas/User'
            - type: object
              nullable: true
        reviewer_id:
          type: integer
          example: 200
        reviewer:
          anyOf:
            - $ref: '#/components/schemas/User'
            - type: object
              nullable: true
        estimated_time:
          description: Time when the reviewer thinks they have finished the review
          type: string
          example: 'Tue, 29. Nov 2022'
          format: 'ddd, dd. mmm yyyy'
        pdf_review:
          description: The PDF-file of the research paper but filled with comments
          type: object
          nullable: true
        review_form:
          $ref: '#/components/schemas/Review%20Form'
    Review Form:
      type: object
      properties:
        score:
          type: integer
        confidence:
          type: string
          enum:
            - Low
            - Medium
            - High
        summary_of_paper:
          type: string
          example: mitochondria the powerhouse of the cell
        main_weaknesses:
          type: string
          example: unclear structure
        main_strengths:
          type: string
          example: good language
        other_comments:
          type: string
          example: I like the design
        open_questions:
          type: string
          example: What is the meaning of life?
        answers:
          type: string
          example: The answer would be 42
  responses:
    UnexpectedError:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
