openapi: 3.0.0
info:
  version: 1.0.0
  title: PeerRequest API
  description: PeerRequest Open API Specification.
paths:
  /auth/logout:
    get:
      tags:
        - auth
      description: Logout the current user
      summary: /auth/logout
      responses:
        '200':
          description: User successfully logged out
  /auth/login:
    get:
      tags:
        - auth
      description: Redirects the user to an auth server
      summary: /auth/login
      parameters:
        - $ref: '#/components/parameters/auth_service'
      responses:
        '302':
          description: Redirect to the specified or default auth service
        '400':
          description: Invalid auth_service
  /auth/callback:
    get:
      tags:
        - auth
      description: OAuth2 Authentication Callback
      summary: /auth/callback
      parameters:
        - name: code
          in: query
          description: auth code give by an auth server to exchange for a token
          required: true
          schema:
            type: string
        - name: state
          in: query
          description: auth state returned by an auth server
          required: true
          schema:
            type: string
        - name: scope
          in: query
          description: contains granted scopes
          required: true
          schema:
            type: string
        - name: error
          in: query
          description: contains an error indicating why authorization failed
          required: false
          schema:
            type: string
        - name: error_description
          in: query
          description: contains an error description
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully logged in (will set a session cookie)
        '400':
          description: Malformed request or invalid flow
  '/categories/{category_id}/entries':
    get:
      tags:
        - categories
        - entries
      description: Returns all entries in a category
      summary: /categories/<category_id>/entries
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
      responses:
        '200':
          description: List of entries of the specified category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entry'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category does not exist
    post:
      tags:
        - categories
        - entries
      description: Adds one or more new entries to a category
      summary: /categories/<category_id>/entries
      parameters:
        - $ref: '#/components/parameters/category_id'
      requestBody:
        description: New entry/entries
        required: true
        content:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Entry'
      responses:
        '200':
          description: Entry/Entries created
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category does not exist
  '/categories/{category_id}/entries/{entry_id}':
    get:
      tags:
        - categories
        - entries
      description: Returns one entries from a category
      summary: /categories/<category_id>/entries/<entry_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      responses:
        '200':
          description: Entry of the specified category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
    patch:
      tags:
        - categories
        - entries
      description: Changes details of an entry
      summary: /categories/<category_id>/entries/<entry_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      requestBody:
        description: Changed details of the entry
        required: true
        content:
          application/json:
            $ref: '#/components/schemas/Entry'
      responses:
        '200':
          description: Entry edited
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
    delete:
      tags:
        - categories
        - entries
      description: Deletes an entry
      summary: /categories/<category_id>/entries/<entry_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      responses:
        '200':
          description: Entry deleted
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
  '/categories/{category_id}/entries/{entry_id}/paper':
    get:
      tags:
        - categories
        - entries
      description: Returns paper of an entries from a category
      summary: /categories/<category_id>/entries/<entry_id>/paper
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      responses:
        '200':
          description: Paper of the specified entry
          content:
            application/pdf:
              schema: null
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
  /reviews:
    get:
      tags:
        - reviews
      description: Returns all reviews that are associated to the requesting user.
      summary: /reviews
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
      responses:
        '200':
          description: List of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
components:
  parameters:
    category_id:
      name: category_id
      in: path
      required: true
      description: The id of the category to retrieve
      schema:
        type: string
    entry_id:
      name: entry_id
      in: path
      required: true
      description: The id of the entry to retrieve
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: How many items to return at one time
      required: false
      schema:
        min: 1
        max: 100
        default: 100
        type: integer
    auth_service:
      name: auth_service
      in: query
      description: refers to a specific auth_service
      required: false
      schema:
        default: keycloak
        type: string
        enum:
          - keycloak
          - kit
    after:
      name: after
      in: query
      description: entity id of last entity from last page
      required: false
      schema:
        type: integer
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Entry:
      type: object
      properties:
        id:
          type: integer
          example: 42
        title:
          type: string
          example: 'Great Paper #01'
        researcher_id:
          type: integer
          example: 100
        researcher_name:
          type: string
          example: Karol Bender
        category_id:
          type: integer
          example: 5
        authors:
          type: string
          example: 'Smitty Werben Jagger Man Jensen, Ada Wong, David Martinez'
        slots:
          type: integer
          example: 2
          nullable: true
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 42
        type:
          type: string
          enum:
            - Internal
            - External
        year:
          type: integer
          example: 2023
        deadline:
          type: string
          example: 'Tue, 29. Nov 2022'
          format: 'ddd, dd. mmm yyyy'
          nullable: true
        title:
          type: string
          example: International Paper Conference
        researcher_id:
          type: integer
          example: 100
        researcher_name:
          type: string
          example: Karol Bender
        rating_scale:
          type: object
          properties:
            low:
              type: integer
            high:
              type: integer
          nullable: true
    User:
      type: object
      properties:
        id:
          type: integer
          example: 42
        name:
          type: string
          example: Roosevelt Booth
        email:
          type: string
          example: roosevelt.booth@example.org
    Review:
      type: object
      properties:
        id:
          type: integer
          example: 42
        entry_id:
          type: integer
          example: 100
        entry:
          anyOf:
            - $ref: '#/components/schemas/Entry'
            - type: object
              nullable: true
        researcher_id:
          type: integer
          example: 100
        researcher:
          anyOf:
            - $ref: '#/components/schemas/User'
            - type: object
              nullable: true
        reviewer_id:
          type: integer
          example: 200
        reviewer:
          anyOf:
            - $ref: '#/components/schemas/User'
            - type: object
              nullable: true
        estimated_time:
          description: Time when the reviewer thinks they have finished the review
          type: string
          example: 'Tue, 29. Nov 2022'
          format: 'ddd, dd. mmm yyyy'
        pdf_review:
          description: The PDF-file of the research paper but filled with comments
          type: object
          nullable: true
        review_form:
          $ref: '#/components/schemas/Review%20Form'
    Review Form:
      type: object
      properties:
        score:
          type: integer
        confidence:
          type: string
          enum:
            - Low
            - Medium
            - High
        summary_of_paper:
          type: string
          example: mitochondria the powerhouse of the cell
        main_weaknesses:
          type: string
          example: unclear structure
        main_strengths:
          type: string
          example: good language
        other_comments:
          type: string
          example: I like the design
        open_questions:
          type: string
          example: What is the meaning of life?
        answers:
          type: string
          example: The answer would be 42
  responses:
    UnexpectedError:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
