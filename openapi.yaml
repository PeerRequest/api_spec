openapi: 3.0.0
info:
  version: 1.0.0
  title: PeerRequest API
  description: PeerRequest Open API Specification.
tags:
  - name: categories
  - name: entries
  - name: direct_requests
  - name: reviews
  - name: messages
  - name: users
paths:
  /api/categories:
    get:
      tags:
        - categories
      description: Returns all categories
      operationId: getCategories
      summary: /api/categories
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1api~1users/get/responses/200/content/application~1json/schema/allOf/0'
                  - type object: null
                    properties:
                      content:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
    post:
      tags:
        - categories
      description: Creates a new category
      operationId: createCategory
      summary: /api/categories
      requestBody:
        description: New category
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    name:
                      type: string
                      example: International Paper Conference
                    year:
                      type: integer
                      example: 2023
                    label:
                      type: string
                      enum:
                        - INTERNAL
                        - EXTERNAL
                      required: true
                    deadline:
                      type: string
                      example: '2021-03-23T10:43:32+02:00'
                      format: 'yyyy-mm-ddTh:min:sec+[timezone]'
                    min_score:
                      type: float
                      example: 0.5
                    max_score:
                      type: float
                      example: 5
                    score_step_size:
                      type: float
                      example: 0.25
                - required:
                    - name
                    - year
                    - label
                    - min_score
                    - max_score
                    - score_step_size
      responses:
        '200':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
    patch:
      tags:
        - categories
      description: Changes details of a category
      operationId: patchCategory
      summary: /api/categories
      requestBody:
        description: Changed details of the category
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    id:
                      type: long
                      example: 42
                - required:
                    - id
                - $ref: '#/paths/~1api~1categories/post/requestBody/content/application~1json/schema/allOf/0'
      responses:
        '200':
          description: Category changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category does not exist
  '/api/categories/{category_id}':
    get:
      tags:
        - categories
      description: Returns a category
      operationId: getCategory
      summary: /api/categories/<category_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
      responses:
        '200':
          description: Specified category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category does not exist
    delete:
      tags:
        - categories
      description: Deletes a category
      operationId: deleteCategory
      summary: /api/categories/<category_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
      responses:
        '200':
          description: Deleted Category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category does not exist
  /api/entries:
    get:
      tags:
        - users
      description: Returns all entries that are associated to the requesting user
      operationId: getUserEntries
      summary: /api/entries
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
      responses:
        '200':
          description: List of entries
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1api~1users/get/responses/200/content/application~1json/schema/allOf/0'
                  - type object: null
                    properties:
                      content:
                        type: array
                        items:
                          $ref: '#/components/schemas/Entry'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
  '/api/categories/{category_id}/entries':
    get:
      tags:
        - entries
      description: Returns all entries in a category
      operationId: getEntries
      summary: /api/categories/<category_id>/entries
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
      responses:
        '200':
          description: List of entries of the specified category
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1api~1users/get/responses/200/content/application~1json/schema/allOf/0'
                  - type object: null
                    properties:
                      content:
                        type: array
                        items:
                          $ref: '#/components/schemas/Entry'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category does not exist
    post:
      tags:
        - entries
      description: Adds one or more new entries to a category
      operationId: createEntry
      summary: /api/categories/<category_id>/entries
      parameters:
        - $ref: '#/components/parameters/category_id'
      requestBody:
        description: New entry/entries
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - type: object
                    properties:
                      document_id:
                        type: string
                        example: '420'
                  - $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries/patch/requestBody/content/application~1json/schema/allOf/1'
                  - required:
                      - name
                      - document_id
      responses:
        '200':
          description: Entry/Entries created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entry'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category does not exist
    patch:
      tags:
        - entries
      description: Changes details of an entry
      operationId: patchEntry
      summary: /api/categories/<category_id>/entries
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      requestBody:
        description: Changed details of the entry
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    id:
                      type: long
                      example: 42
                - type: object
                  properties:
                    name:
                      type: string
                      example: 'Great Paper #01'
                    authors:
                      type: string
                      example: 'Smitty Werben Jagger Man Jensen, Ada Wong, David Martinez'
                - required:
                    - id
      responses:
        '200':
          description: Entry changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
  '/api/categories/{category_id}/entries/{entry_id}':
    get:
      tags:
        - entries
      description: Returns one entry from a category
      operationId: getEntry
      summary: /api/categories/<category_id>/entries/<entry_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      responses:
        '200':
          description: Specified Entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
    delete:
      tags:
        - entries
      description: Deletes an entry
      operationId: deleteEntry
      summary: /api/categories/<category_id>/entries/<entry_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      responses:
        '200':
          description: Deleted Entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
  '/api/categories/{category_id}/entries/{entry_id}/paper':
    get:
      tags:
        - entries
      description: Returns the paper of an entry from a category
      operationId: getPaper
      summary: /api/categories/<category_id>/entries/<entry_id>/paper
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      responses:
        '200':
          description: Paper of the specified entry
          content:
            application/pdf:
              schema:
                type: object
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
  /api/requests:
    get:
      tags:
        - users
      description: Returns all requests that are associated to the requesting user
      operationId: getUserRequests
      summary: /api/requests
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
      responses:
        '200':
          description: List of requests
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1api~1users/get/responses/200/content/application~1json/schema/allOf/0'
                  - type object: null
                    properties:
                      content:
                        type: array
                        items:
                          $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1process~1claim/post/responses/200/content/application~1json/schema'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
  '/api/categories/{category_id}/entries/{entry_id}/process':
    get:
      tags:
        - direct_requests
      description: Returns the direct request process of an entry
      operationId: getDirectRequestProcess
      summary: /api/categories/<category_id>/entries/<entry_id>/process
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      responses:
        '200':
          description: Specified direct request process
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: long
                        example: 3
                  - $ref: '#/components/schemas/Review/allOf/2'
                  - $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1process/post/requestBody/content/application~1json/schema/allOf/0'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
    post:
      tags:
        - direct_requests
      description: Adds a direct request process to an entry
      operationId: createDirectRequestProcess
      summary: /api/categories/<category_id>/entries/<entry_id>/process
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      requestBody:
        description: New direct request process
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    open_slots:
                      type: integer
                      example: 4
                - required:
                    - open_slots
      responses:
        '200':
          description: Direct request process created
          content:
            application/json:
              schema:
                $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1process/get/responses/200/content/application~1json/schema'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
    patch:
      tags:
        - direct_requests
      description: Changes a direct request process
      operationId: patchDirectRequestProcess
      summary: /api/categories/<category_id>/entries/<entry_id>/process
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      requestBody:
        description: changed details of the direct request process
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1process/post/requestBody/content/application~1json/schema/allOf/0'
                - required:
                    - open_slots
      responses:
        '200':
          description: Direct request process changed
          content:
            application/json:
              schema:
                $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1process/get/responses/200/content/application~1json/schema'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
  '/api/categories/{category_id}/entries/{entry_id}/process/requests':
    get:
      tags:
        - direct_requests
      description: Returns all direct requests of an entry
      operationId: getDirectRequests
      summary: /api/categories/<category_id>/entries/<entry_id>/process/requests
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
      responses:
        '200':
          description: List of direct requests of the specified entry
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1api~1users/get/responses/200/content/application~1json/schema/allOf/0'
                  - type object: null
                    properties:
                      content:
                        type: array
                        items:
                          $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1process~1claim/post/responses/200/content/application~1json/schema'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
    post:
      tags:
        - direct_requests
      description: Creates a direct request
      operationId: postDirectRequests
      summary: /api/categories/<category_id>/entries/<entry_id>/process/requests
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      requestBody:
        description: changed details of the direct request
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    reviewer_id:
                      type: string
                      example: '23'
                - required:
                    - reviewer_id
      responses:
        '200':
          description: Changed direct request
          content:
            application/json:
              schema:
                $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1process~1claim/post/responses/200/content/application~1json/schema'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
    patch:
      tags:
        - direct_requests
      description: Changes the details of a direct request
      operationId: patchDirectRequests
      summary: /api/categories/<category_id>/entries/<entry_id>/process/requests
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      requestBody:
        description: changed details of the direct request
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    id:
                      type: long
                      example: 3
                - type: object
                  properties:
                    state:
                      type: string
                      enum:
                        - ACCEPTED
                        - DECLINED
                        - PENDING
                      required: true
                - required:
                    - id
                    - state
      responses:
        '200':
          description: Changed direct request
          content:
            application/json:
              schema:
                $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1process~1claim/post/responses/200/content/application~1json/schema'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
  '/api/categories/{category_id}/entries/{entry_id}/process/claim':
    post:
      tags:
        - direct_requests
      description: Claims an open slot
      operationId: claimDirectRequests
      summary: /api/categories/<category_id>/entries/<entry_id>/process/claim
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      responses:
        '200':
          description: Claimed open slot
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1process~1requests/patch/requestBody/content/application~1json/schema/allOf/0'
                  - $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1process~1requests/patch/requestBody/content/application~1json/schema/allOf/1'
                  - $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1process~1requests/post/requestBody/content/application~1json/schema/allOf/0'
                  - type: object
                    properties:
                      direct_request_process_id:
                        type: long
                        example: 3
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
  '/api/categories/{category_id}/entries/{entry_id}/process/requests/{request_id}':
    delete:
      tags:
        - direct_requests
      description: deletes a direct request only if request is not accepted
      operationId: deleteDirectRequests
      summary: /api/categories/<category_id>/entries/<entry_id>/process/requests/<request_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/components/parameters/request_id'
      responses:
        '200':
          description: Direct request deleted
          content:
            application/json:
              schema:
                $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1process~1claim/post/responses/200/content/application~1json/schema'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The requested category or entry does not exist
  /api/reviews:
    get:
      tags:
        - users
      description: Returns all reviews that are associated to the requesting user
      operationId: getUserReviews
      summary: /api/reviews
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
      responses:
        '200':
          description: List of reviews
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1api~1users/get/responses/200/content/application~1json/schema/allOf/0'
                  - type object: null
                    properties:
                      content:
                        type: array
                        items:
                          $ref: '#/components/schemas/Review'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
  '/api/categories/{category_id}/entries/{entry_id}/reviews':
    get:
      tags:
        - reviews
      description: Returns all reviews for an entry
      operationId: getReviews
      summary: /api/categories/<category_id>/entries/<entry_id>/reviews
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
      responses:
        '200':
          description: List of reviews for the specified entry
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1api~1users/get/responses/200/content/application~1json/schema/allOf/0'
                  - type object: null
                    properties:
                      content:
                        type: array
                        items:
                          $ref: '#/components/schemas/Review'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: The specified entry or category does not exist
    patch:
      tags:
        - reviews
      description: Changes a review
      operationId: patchReview
      summary: /api/categories/<category_id>/entries/<entry_id>/reviews
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
      requestBody:
        description: Changed details of a review. A researcher may only alter the answers_from_authors field. A reviewer may only alter every other optional field
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    id:
                      type: long
                      example: 42324
                - type: object
                  properties:
                    confidence_level:
                      type: string
                      enum:
                        - Low
                        - Medium
                        - High
                    summary:
                      type: string
                      example: mitochondria the powerhouse of the cell
                    main_weaknesses:
                      type: string
                      example: unclear structure
                    main_strengths:
                      type: string
                      example: good language
                    questions_for_authors:
                      type: string
                      example: What is the meaning of life?
                    answers_from_authors:
                      type: string
                      example: The answer would be 42
                    other_comments:
                      type: string
                      example: I like the design
                    score:
                      type: integer
                      example: 2.25
                - required:
                    - id
      responses:
        '200':
          description: Review changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: 'The specified review, entry or category does not exist'
  '/api/categories/{category_id}/entries/{entry_id}/reviews/{review_id}':
    get:
      tags:
        - reviews
      description: Returns a review from an entry
      operationId: getReview
      summary: /api/categories/<category_id>/entries/<entry_id>/reviews/<review_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/components/parameters/review_id'
      responses:
        '200':
          description: Review of the specified entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: 'The specified review, entry or category does not exist'
  '/api/categories/{category_id}/entries/{entry_id}/reviews/{review_id}/document':
    get:
      tags:
        - reviews
      description: Returns the documents attached to the review
      operationId: getReviewDocument
      summary: /api/categories/<category_id>/entries/<entry_id>/reviews/<review_id>/document
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/components/parameters/review_id'
      responses:
        '200':
          description: Document
          content:
            application/pdf:
              schema:
                type: object
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: 'There is no document attached to this review or the specified review, entry or category does not exist'
    post:
      tags:
        - reviews
      description: Attaches a document to a review
      operationId: addReviewDocument
      summary: /api/categories/<category_id>/entries/<entry_id>/reviews/<review_id>/document
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/components/parameters/review_id'
      requestBody:
        description: new document
        content:
          application/pdf:
            schema:
              type: object
      responses:
        '200':
          description: Document successfully attached
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: 'The specified review, entry or category does not exist'
    delete:
      tags:
        - reviews
      description: Deletes a document attached to an review
      operationId: deleteReviewDocument
      summary: /api/categories/<category_id>/entries/<entry_id>/reviews/<review_id>/document
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/components/parameters/review_id'
      responses:
        '200':
          description: Document successfully deleted
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: 'The specified review, entry or category does not exist'
  '/api/categories/{category_id}/entries/{entry_id}/reviews/{review_id}/notify':
    post:
      tags:
        - reviews
      description: Notifies a researcher or reviewer about an edit of the review form
      operationId: notifyReview
      summary: /api/categories/<category_id>/entries/<entry_id>/reviews/<review_id>/notify
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/components/parameters/review_id'
      responses:
        '200':
          description: Notified successfully
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: 'The specified review, entry or category does not exist'
  '/api/categories/{category_id}/entries/{entry_id}/reviews/{review_id}/messages':
    get:
      tags:
        - messages
      description: Returns all messages of a review
      operationId: getMessage
      summary: /api/categories/<category_id>/entries/<entry_id>/reviews/<review_id>/messages
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/components/parameters/review_id'
      responses:
        '200':
          description: List of messages for the specified review
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1api~1users/get/responses/200/content/application~1json/schema/allOf/0'
                  - type object: null
                    properties:
                      content:
                        type: array
                        items:
                          $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1reviews~1%7Breview_id%7D~1messages~1%7Bmessage_id%7D/delete/responses/200/content/application~1json/schema'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: 'The specified review, entry or category does not exist'
    post:
      tags:
        - messages
      description: Adds a message to the message board of a review
      operationId: createMessage
      summary: /api/categories/<category_id>/entries/<entry_id>/reviews/<review_id>/messages
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/components/parameters/review_id'
      requestBody:
        description: New message
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    timestamp:
                      type: string
                      example: '2021-03-23T10:43:32+02:00'
                      format: 'yyyy-mm-ddTh:min:sec+[timezone]'
                - type: object
                  properties:
                    content:
                      type: string
                      example: What do you mean at line 2345?
                - required:
                    - timestamp
                    - content
      responses:
        '200':
          description: Message created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1reviews~1%7Breview_id%7D~1messages~1%7Bmessage_id%7D/delete/responses/200/content/application~1json/schema'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: 'The requested category, entry or review does not exist'
    patch:
      tags:
        - messages
      description: Changes a message
      operationId: patchMessage
      summary: /api/categories/<category_id>/entries/<entry_id>/reviews/<review_id>/messages
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/components/parameters/review_id'
      requestBody:
        description: Changed details of the message
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    id:
                      type: long
                      example: 123123
                - $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1reviews~1%7Breview_id%7D~1messages/post/requestBody/content/application~1json/schema/allOf/1'
                - required:
                    - id
      responses:
        '200':
          description: Message changed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1reviews~1%7Breview_id%7D~1messages~1%7Bmessage_id%7D/delete/responses/200/content/application~1json/schema'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: 'The requested category, entry or review does not exist'
  '/api/categories/{category_id}/entries/{entry_id}/reviews/{review_id}/messages/{message_id}':
    delete:
      tags:
        - messages
      description: Deletes a message
      operationId: deleteMessage
      summary: /api/categories/<category_id>/entries/<entry_id>/reviews/<review_id>/messages/<message_id>
      parameters:
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/entry_id'
        - $ref: '#/components/parameters/review_id'
        - $ref: '#/components/parameters/message_id'
      responses:
        '200':
          description: Deleted message
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1reviews~1%7Breview_id%7D~1messages/patch/requestBody/content/application~1json/schema/allOf/0'
                  - type: object
                    properties:
                      review_id:
                        type: long
                        example: 42324
                  - type: object
                    properties:
                      creator_id:
                        type: string
                        example: 42fsf234
                  - $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1reviews~1%7Breview_id%7D~1messages/post/requestBody/content/application~1json/schema/allOf/0'
                  - $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1reviews~1%7Breview_id%7D~1messages/post/requestBody/content/application~1json/schema/allOf/1'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
        '404':
          description: 'The specified review, entry or category does not exist'
  /api/users:
    get:
      tags:
        - users
      description: Returns all users
      operationId: getUsers
      summary: /api/users
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/after'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      page_size:
                        type: int
                        example: 100
                      current_page:
                        type: int
                        example: 2
                      last_page:
                        type: int
                        example: 40
                  - type object: null
                    properties:
                      content:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
  '/api/users/{user_id}':
    get:
      tags:
        - users
      description: Returns a user
      operationId: getUser
      summary: /api/user/<user_id>
      parameters:
        - name: user_id
          in: path
          required: true
          description: The id of a user
          schema:
            type: string
      responses:
        '200':
          description: specified user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
        '400':
          description: Invalid Request
        '401':
          description: Unauthorized
components:
  parameters:
    category_id:
      name: category_id
      in: path
      required: true
      description: The id of a category
      schema:
        type: string
    entry_id:
      name: entry_id
      in: path
      required: true
      description: The id of an entry
      schema:
        type: string
    request_id:
      name: request_id
      in: path
      required: true
      description: The id of a request
      schema:
        type: string
    review_id:
      name: review_id
      in: path
      required: true
      description: The id of a review
      schema:
        type: string
    message_id:
      name: message_id
      in: path
      required: true
      description: The id of a message
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: How many items to return at one time
      required: false
      schema:
        type: integer
        min: 1
        max: 100
        default: 100
    auth_service:
      name: auth_service
      in: query
      description: refers to a specific auth_service
      required: false
      schema:
        default: keycloak
        type: string
        enum:
          - keycloak
          - kit
    after:
      name: page
      in: query
      description: page to get
      required: false
      schema:
        type: integer
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Entry:
      allOf:
        - $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries/patch/requestBody/content/application~1json/schema/allOf/0'
        - type: object
          properties:
            category_id:
              type: long
              example: 42
        - type: object
          properties:
            researcher_id:
              type: string
              example: '42'
        - $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries/post/requestBody/content/application~1json/schema/items/allOf/0'
        - $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries/patch/requestBody/content/application~1json/schema/allOf/1'
    Category:
      allOf:
        - $ref: '#/paths/~1api~1categories/patch/requestBody/content/application~1json/schema/allOf/0'
        - $ref: '#/components/schemas/Entry/allOf/2'
        - $ref: '#/paths/~1api~1categories/post/requestBody/content/application~1json/schema/allOf/0'
    User:
      type: object
      properties:
        id:
          type: integer
          example: 42
        first_name:
          type: string
          example: Roosevelt
        last_name:
          type: string
          example: Booth
        email:
          type: string
          example: roosevelt.booth@example.org
    Review:
      allOf:
        - $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1reviews/patch/requestBody/content/application~1json/schema/allOf/0'
        - $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1process~1requests/post/requestBody/content/application~1json/schema/allOf/0'
        - type: object
          properties:
            entry_id:
              type: long
              example: 42
        - type: object
          properties:
            review_document_id:
              type: string
              example: '421230'
        - $ref: '#/paths/~1api~1categories~1%7Bcategory_id%7D~1entries~1%7Bentry_id%7D~1reviews/patch/requestBody/content/application~1json/schema/allOf/1'
  responses:
    UnexpectedError:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
